import pytest
from django.contrib.auth import get_user_model
from tasks.models import Task
from django.utils import timezone
import uuid

from tasks.services.category_service import CategoryService
from tasks.services.task_service import TaskService


# Fixture para el modelo de usuario
@pytest.fixture
def user_model():
    """Returns the Django User model."""
    return get_user_model()

# Fixture para crear usuarios
@pytest.fixture
def user_factory(user_model):
    """
    A factory fixture to create User instances with unique usernames by default.
    Usage: user = user_factory() or user = user_factory(username='custom_name')
    """
    def _create_user(**kwargs):
        # Generate a unique username if not provided
        if 'username' not in kwargs:
            kwargs['username'] = f"testuser_{uuid.uuid4().hex[:8]}_{int(timezone.now().timestamp())}"
        kwargs.setdefault('password', 'password123') # Ensure a default password
        return user_model.objects.create_user(**kwargs)
    return _create_user

# Fixture para un usuario común en las pruebas
@pytest.fixture
def common_user(user_factory):
    """
    A common user for tests, created uniquely for each test using it.
    The username will be auto-generated by user_factory.
    """
    return user_factory() # <--- ¡IMPORTANTE! Ya no pasamos un username fijo aquí.

# Fixture para otro usuario, para probar aislamiento
@pytest.fixture
def other_user(user_factory):
    """
    Another user for tests, created uniquely for each test using it.
    The username will be auto-generated by user_factory.
    """
    return user_factory() # <--- ¡IMPORTANTE! Ya no pasamos un username fijo aquí.

# Fixture para crear tareas
@pytest.fixture
def task_factory(): # No longer needs user_model as direct dependency, it gets user from args
    """
    A factory fixture to create Task instances.
    Usage: task = task_factory(user=some_user, title='My Task')
    """
    def _create_task(user, **kwargs):
        # Default status to 'pending' if not provided
        kwargs.setdefault('status', 'pending')
        # Ensure created_at is set if not provided, for consistent ordering
        kwargs.setdefault('created_at', timezone.now())
        return Task.objects.create(user=user, **kwargs)
    return _create_task

@pytest.fixture(scope='module')
def category_service_instance():
    """Proporciona una instancia de CategoryService para los tests unitarios."""
    return CategoryService()

# Instantiate the service once for all tests in this module
@pytest.fixture(scope='module')
def task_service_instance():
    """Provides an instance of TaskService."""
    return TaskService()